plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id "net.nemerosa.versioning" version "2.12.0" apply true
    id 'biz.aQute.bnd.builder'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.25'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.slf4j:slf4j-simple:1.7.25'
}

versioning {
    branchEnv = [ 'CI_COMMIT_BRANCH', 'BRANCH_NAME' ]
}

group = 'eu.hlavki.text'
version = versioning.info.tag && !versioning.info.dirty ? versioning.info.tag : versioning.info.display
sourceCompatibility = '1.8'
description="JLemmaGen is java implmentation of LemmaGen project. It's open source lemmatizer with 15 prebuilted european lexicons."
ext.license='http://www.apache.org/licenses/LICENSE-2.0.txt'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


publishing {
    repositories {
        maven {
            name = "MavenCentral"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty('sonatypeUploadUser')
                password = findProperty('sonatypeUploadPassword')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            pom {
                name.set("jlemmagen")
                description.set(project.description)
                url.set("https://github.com/hlavki/jlemmagen")
                licenses {
                    license {
                        name.set("Apache License 2.0")
                        url.set(license)
                    }
                }
                developers {
                    developer {
                        id.set("hlavki")
                        name.set("Michal Hlavac")
                        email.set("miso@hlavki.eu")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/hlavki/jlemmagen")
                    developerConnection.set("scm:git:https://github.com/hlavki/jlemmagen")
                    url.set("https://github.com/hlavki/jlemmagen")
                }

            }
        }
    }
}

signing {
    useGpgCmd()
    sign configurations.archives
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        versioning.info.tag && !versioning.info.dirty
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Revision' : versioning.info.commit,
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'Bundle-Description' : "${project.description}",
            'Bundle-License' : "${license}",
            'Bundle-SymbolicName' : 'eu.hlavki.text.jlemmagen',
            'Bundle-Name' : 'JLemmaGen',
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
        )
    }
    bnd(
        // https://bnd.bndtools.org/chapters/825-instructions-ref.html
        // vlk : tu asi ma byt ciarka
        '-exportcontents': 'eu.hlavki.text.lemmagen, eu.hlavki.text.lemmagen.api',
    )
}
